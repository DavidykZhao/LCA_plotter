f
f = with(US, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
f
print(f)
length(f)
?with
names_model = names(US)
names_model
names_model = names_model[2:]
names_model = names_model[-1]
names_model
f = with(data, cbind(names_model)~1)
dta$"country"
dta$'country'
?find_best_fit
getAnywhere(find_best_fit)
library(roxygen2)
getAnywhere(find_best_fit)
library(LCAplotter)
getAnywhere(find_best_fit)
?find_best_fit
profile_plot = function(data, num_var, form, model = NULL, maximum_num_class = 7){
library(tidyverse)
if(is.null(model)){
#f = with(data, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
min_bic <- 1000000
for(i in 1:maximum_num_class){
lc <- poLCA::poLCA(form, data, nclass=i, maxiter=3000,
tol=1e-5, na.rm=FALSE,
nrep=10, verbose=TRUE, calc.se=TRUE)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
} else {
LCA_best_model = model
}
probs = LCA_best_model$probs
n_class = length(LCA_best_model$P)
profile_tb = data.frame(
tax = replicate(n_class, NA),
religion = replicate(n_class, NA),
free_election = replicate(n_class, NA),
state_aid = replicate(n_class, NA),
civil_rights = replicate(n_class, NA),
women = replicate(n_class, NA))
for (i in 1:num_var) {
if (length(probs[[i]][1,]) < 10) {
probs[[i]] = cbind(probs[[i]], matrix(0, nrow = nrow(probs[[i]]), ncol = 10 - ncol(probs[[i]])))
}
profile_tb[, i] = probs[[i]] %*% 1:10
}
rownames(profile_tb) = paste(rep("class", n_class), seq(1, n_class, 1), sep = "_")
profile_tb = rownames_to_column(profile_tb)
colnames(profile_tb)[1] = "class"
profile_long = reshape::melt(profile_tb, id.vars = "class")
p = ggplot(profile_long, aes(x = variable, y = value, group = class, color = class)) +
geom_point(size = 2.25, aes(shape = class))+
geom_line(size = 1.00) +
labs(x = NULL, y = "Mean value of the response") +
theme_bw(base_size = 12)+
ggtitle(paste(paste("class", 1:length(LCA_best_model$P), sep = "_"),
round(LCA_best_model$P, 3), collapse = ", "))+
theme(plot.margin=unit(c(1.5,1.5,1.5,1.2),"cm"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13))+
theme(plot.title = element_text(hjust = 0.5, size = 10))
print(p)
return(p)
}
dta = read.csv("materials/nonzero_dataset.csv")
US = dta %>%
filter(country == 'United States')
f = with(US, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
library(poLCA)
library(tidyverse)
dta = read.csv("materials/nonzero_dataset.csv")
US = dta %>%
filter(country == 'United States')
f = with(US, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
profile_plot = function(data, num_var, form, model = NULL, maximum_num_class = 7){
library(tidyverse)
library(poLCA)
if(is.null(model)){
#f = with(data, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
min_bic <- 1000000
for(i in 1:maximum_num_class){
lc <- poLCA::poLCA(form, data, nclass=i, maxiter=3000,
tol=1e-5, na.rm=FALSE,
nrep=10, verbose=TRUE, calc.se=TRUE)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
} else {
LCA_best_model = model
}
probs = LCA_best_model$probs
n_class = length(LCA_best_model$P)
profile_tb = data.frame(
tax = replicate(n_class, NA),
religion = replicate(n_class, NA),
free_election = replicate(n_class, NA),
state_aid = replicate(n_class, NA),
civil_rights = replicate(n_class, NA),
women = replicate(n_class, NA))
for (i in 1:num_var) {
if (length(probs[[i]][1,]) < 10) {
probs[[i]] = cbind(probs[[i]], matrix(0, nrow = nrow(probs[[i]]), ncol = 10 - ncol(probs[[i]])))
}
profile_tb[, i] = probs[[i]] %*% 1:10
}
rownames(profile_tb) = paste(rep("class", n_class), seq(1, n_class, 1), sep = "_")
profile_tb = rownames_to_column(profile_tb)
colnames(profile_tb)[1] = "class"
profile_long = reshape::melt(profile_tb, id.vars = "class")
p = ggplot(profile_long, aes(x = variable, y = value, group = class, color = class)) +
geom_point(size = 2.25, aes(shape = class))+
geom_line(size = 1.00) +
labs(x = NULL, y = "Mean value of the response") +
theme_bw(base_size = 12)+
ggtitle(paste(paste("class", 1:length(LCA_best_model$P), sep = "_"),
round(LCA_best_model$P, 3), collapse = ", "))+
theme(plot.margin=unit(c(1.5,1.5,1.5,1.2),"cm"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13))+
theme(plot.title = element_text(hjust = 0.5, size = 10))
print(p)
return(p)
}
profile_plot(US, 6, f)
find_best_fit =function(data, form, criterion = 'bic'){
#f = with(data, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
min_criterion <- 1000000
for(i in 1:7){
lc <- poLCA(form, data, nclass=i, maxiter=3000,
tol=1e-5, na.rm=FALSE,
nrep = 10, verbose =TRUE, calc.se=TRUE)
if(lc[[criterion]] < min_criterion){
min_criterion <- lc[[criterion]]
LCA_best_model <- lc
}
}
return(LCA_best_model)
}
best_model = find_best_fit(US, f)
profile_plot(US, 6, f, best_model)
profile_plot(US, 6, f, best_model)
attributes(best_model)
best_model$probs
length(best_model$probs)
length(best_model$P)
profile_plot(US, 6, f, best_model, maximum_num_class = 2)
profile_plot(US, 6, f,  maximum_num_class = 2)
?poLCA
a = list()
is.null(a)
a
profile_plot = function(data, num_var, form, model = NULL, maximum_num_class = 7, ...){
require(tidyverse)
require(poLCA)
if(is.null(model)){
#f = with(data, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
min_bic <- 1000000
for(i in 1:maximum_num_class){
lc <- poLCA::poLCA(form, data, nclass=i, maxiter=3000,
...)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
} else {
LCA_best_model = model
}
# Compatibility check
if(num_var != length(best_model$probs)) {
stop("Please make sure you provide the correct number of item variables at num_var.")
}
probs = LCA_best_model$probs
n_class = length(LCA_best_model$P)
profile_tb = data.frame(
tax = replicate(n_class, NA),
religion = replicate(n_class, NA),
free_election = replicate(n_class, NA),
state_aid = replicate(n_class, NA),
civil_rights = replicate(n_class, NA),
women = replicate(n_class, NA))
for (i in 1:num_var) {
if (length(probs[[i]][1,]) < 10) {
probs[[i]] = cbind(probs[[i]], matrix(0, nrow = nrow(probs[[i]]), ncol = 10 - ncol(probs[[i]])))
}
profile_tb[, i] = probs[[i]] %*% 1:10
}
rownames(profile_tb) = paste(rep("class", n_class), seq(1, n_class, 1), sep = "_")
profile_tb = rownames_to_column(profile_tb)
colnames(profile_tb)[1] = "class"
profile_long = reshape::melt(profile_tb, id.vars = "class")
p = ggplot(profile_long, aes(x = variable, y = value, group = class, color = class)) +
geom_point(size = 2.25, aes(shape = class))+
geom_line(size = 1.00) +
labs(x = NULL, y = "Mean value of the response") +
theme_bw(base_size = 12)+
ggtitle(paste(paste("class", 1:length(LCA_best_model$P), sep = "_"),
round(LCA_best_model$P, 3), collapse = ", "))+
theme(plot.margin=unit(c(1.5,1.5,1.5,1.2),"cm"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13))+
theme(plot.title = element_text(hjust = 0.5, size = 10))
print(p)
return(p)
}
profile_plot(US, 6, f, best_model, maximum_num_class = 2)
profile_plot(US, 6, f, maximum_num_class = 2, verbose = F)
profile_plot(US, 6, f, maximum_num_class = 1, verbose = F)
find_best_fit =function(data, form, criterion = 'bic', maximum_num_class = 7, ...){
#f = with(data, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
min_criterion <- 1000000
for(i in 1:maximum_num_class){
lc <- poLCA(form, data, nclass=i, ...)
if(lc[[criterion]] < min_criterion){
min_criterion <- lc[[criterion]]
LCA_best_model <- lc
}
}
return(LCA_best_model)
}
find_best_fit(US, f, maximum_num_class = 2)
best_model
names(best_model$probs)
?replicate
repeat()
?repeat
q
?repeat
q
rep(1,3)
?matrix
profile_tb = as.data.frame(matrix(NA, nrow = 3, ncol = 6))
profile_tb
profile_plot = function(data, num_var, form, model = NULL, maximum_num_class = 7, ...){
require(tidyverse)
require(poLCA)
if(is.null(model)){
#f = with(data, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
min_bic <- 1000000
for(i in 1:maximum_num_class){
lc <- poLCA::poLCA(form, data, nclass=i, ...)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
} else {
LCA_best_model = model
}
# Compatibility check
if(num_var != length(best_model$probs)) {
stop("Please make sure you provide the correct number of item variables at num_var.")
}
# Extract the item variable name to construct a df for further plotting
item_var_name = names(best_model$probs)
probs = LCA_best_model$probs
n_class = length(LCA_best_model$P)
profile_tb = as.data.frame(matrix(NA, nrow =n_class, ncol = length(item_var_name)))
colnames(profile_tb) = item_var_name
# profile_tb = data.frame(
#   tax = replicate(n_class, NA),
#   religion = replicate(n_class, NA),
#   free_election = replicate(n_class, NA),
#   state_aid = replicate(n_class, NA),
#   civil_rights = replicate(n_class, NA),
#   women = replicate(n_class, NA))
for (i in 1:num_var) {
if (length(probs[[i]][1,]) < 10) {
probs[[i]] = cbind(probs[[i]], matrix(0, nrow = nrow(probs[[i]]), ncol = 10 - ncol(probs[[i]])))
}
profile_tb[, i] = probs[[i]] %*% 1:10
}
rownames(profile_tb) = paste(rep("class", n_class), seq(1, n_class, 1), sep = "_")
profile_tb = rownames_to_column(profile_tb)
colnames(profile_tb)[1] = "class"
profile_long = reshape::melt(profile_tb, id.vars = "class")
p = ggplot(profile_long, aes(x = variable, y = value, group = class, color = class)) +
geom_point(size = 2.25, aes(shape = class))+
geom_line(size = 1.00) +
labs(x = NULL, y = "Mean value of the response") +
theme_bw(base_size = 12)+
ggtitle(paste(paste("class", 1:length(LCA_best_model$P), sep = "_"),
round(LCA_best_model$P, 3), collapse = ", "))+
theme(plot.margin=unit(c(1.5,1.5,1.5,1.2),"cm"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13))+
theme(plot.title = element_text(hjust = 0.5, size = 10))
print(p)
return(p)
}
profile_plot(US, 6, f, maximum_num_class = 5)
profile_plot(US, 7, f, maximum_num_class = 5)
profile_plot(US, 6, f, best_model, maximum_num_class = 5)
profile_plot(US, 2, f, best_model, maximum_num_class = 5)
?require
attributes(best_model)
stacked_bar_by_item = function(model) {
require(tidyverse)
require(poLCA)
level_multinomial = length(model$probs[[1]][1, ])
if(!is.null(level_multinomial) & level_multinomial > 9){
manual_Palette = colorRampPalette(RColorBrewer::brewer.pal(9, "Greys"))(level_multinomial)
} else {
manual_Palette = colorRampPalette(RColorBrewer::brewer.pal(level_multinomial, "Greys"))
}
g = reshape2::melt(model$probs) %>%
ggplot(aes(x = Var1, y = value, fill = Var2))+
geom_bar(stat = "identity", position = "stack")+
facet_grid(L1 ~ .) +
scale_fill_manual(values = manual_Palette)+
theme_bw() +
labs(x = "Items",y="Prob. of the multinomial model", fill ="Levels")+
labs(title = "Stacked barchart of Latent Class model")+
theme(axis.ticks.y=element_blank(),
panel.grid.major.y=element_blank())+
guides(fill = guide_legend(reverse=TRUE))+
coord_flip()
print(g)
return(g)
}
stacked_bar_by_item(best_model)
stacked_bar_by_class = function(model) {
require(tidyverse)
require(poLCA)
level_multinomial = length(model$probs[[1]][1, ])
if(!is.null(level_multinomial) & level_multinomial > 9){
manual_Palette = colorRampPalette(RColorBrewer::brewer.pal(9, "Greys"))(level_multinomial)
} else {
manual_Palette = colorRampPalette(RColorBrewer::brewer.pal(level_multinomial, "Greys"))
}
g = reshape2::melt(model$probs) %>%
ggplot(aes(x = L1, y = value, fill = Var2))+
geom_bar(stat = "identity", position = "stack")+
facet_grid(Var1 ~ .) +
scale_fill_manual(values = manual_Palette)+
theme_bw() +
labs(x = "Items",y="Prob. of the multinomial model", fill ="Levels")+
labs(title = "Stacked barchart of Latent Class model")+
theme(axis.ticks.y=element_blank(),
panel.grid.major.y=element_blank())+
guides(fill = guide_legend(reverse=TRUE))+
coord_flip()
print(g)
return(g)
}
stacked_bar_by_class(best_model)
library(RColorBrewer)
display.brewer.all()
brewer.pal.info
names(brewer.pal())
rownames(brewer.pal.info)
"Greys" in rownames(brewer.pal.info)
"Greys" %in% rownames(brewer.pal.info)
"Greys" !%in% rownames(brewer.pal.info)
!"Greys" %in% rownames(brewer.pal.info)
stacked_bar_by_item = function(model, color_palette = "Greys") {
require(tidyverse)
require(poLCA)
require(RColorBrewer)
# Compatibility check on color palette
if(!color_palette %in% rownames(brewer.pal.info)) {
stop("Please make sure the color_palette you provdied
exists in the color palette in RColorBrewer package,
you could find them using display.brewer.all() function")
}
level_multinomial = length(model$probs[[1]][1, ])
if(!is.null(level_multinomial) & level_multinomial > 8){
manual_Palette = colorRampPalette(brewer.pal(8, color_palette))(level_multinomial)
} else {
manual_Palette = colorRampPalette(brewer.pal(level_multinomial, color_palette))
}
g = reshape2::melt(model$probs) %>%
ggplot(aes(x = Var1, y = value, fill = Var2))+
geom_bar(stat = "identity", position = "stack")+
facet_grid(L1 ~ .) +
scale_fill_manual(values = manual_Palette)+
theme_bw() +
labs(x = "Items",y="Prob. of the multinomial model", fill ="Levels")+
labs(title = "Stacked barchart of Latent Class model")+
theme(axis.ticks.y=element_blank(),
panel.grid.major.y=element_blank())+
guides(fill = guide_legend(reverse=TRUE))+
coord_flip()
print(g)
return(g)
}
stacked_bar_by_item(best_model)
stacked_bar_by_item(best_model, "Set1")
stacked_bar_by_class = function(model, color_palette = "Greys") {
require(tidyverse)
require(poLCA)
level_multinomial = length(model$probs[[1]][1, ])
if(!is.null(level_multinomial) & level_multinomial > 8){
manual_Palette = colorRampPalette(RColorBrewer::brewer.pal(8, color_palette))(level_multinomial)
} else {
manual_Palette = colorRampPalette(RColorBrewer::brewer.pal(level_multinomial, color_palette))
}
g = reshape2::melt(model$probs) %>%
ggplot(aes(x = L1, y = value, fill = Var2))+
geom_bar(stat = "identity", position = "stack")+
facet_grid(Var1 ~ .) +
scale_fill_manual(values = manual_Palette)+
theme_bw() +
labs(x = "Items",y="Prob. of the multinomial model", fill ="Levels")+
labs(title = "Stacked barchart of Latent Class model")+
theme(axis.ticks.y=element_blank(),
panel.grid.major.y=element_blank())+
guides(fill = guide_legend(reverse=TRUE))+
coord_flip()
print(g)
return(g)
}
stacked_bar_by_class(best_model, "Set2")
library(LCAplotter)
stacked_bar_by_item(best_model)
save(US, file="data/example_data.RData")
devtools::use_vignette("my-vignette")
install.packages("rmarkdown")
devtools::use_vignette("my-vignette")
devtools::use_vignette("my-vignette")
library(LCAplotter)
devtools::use_vignette("my-vignette")
library(devtools)
devtools::use_vignette("my-vignette")
devtools::use_vignette("introduction")
install.packages('devtools')
install.packages("devtools")
devtools::use_vignette("introduction")
use_vignette
?use_vignette
usethis::use_vignette()
usethis::use_vignette("Introduction")
dta = read.csv("materials/nonzero_dataset.csv")
US = dta %>%
filter(country == 'United States')
library(tidyverse)
dta = read.csv("materials/nonzero_dataset.csv")
US = dta %>%
filter(country == 'United States')
democracy = dta %>%
filter(country == 'United States')
devtools::use_data(democracy)
usethis::use_data(democracy)
library(LCAplotter)
US
rm(US)
rm(dta)
rm(democracy)
library(LCAplotter)
dim(democracy)
democracy
knitr::kable(democracy)
f = with(US, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
f = with(democracy, cbind(tax, religion, free_election, state_aid, civil_rights, women)~1)
best_model = find_best_fit(democracy, f)
best_model
?poLCA
profile_plot(democracy, 6, f)
profile_plot(democracy, 4, f, maximum_num_class = 2)
profile_plot(democracy, 6, f, maximum_num_class = 2)
stacked_bar_by_item(best_model)
?stacked_bar_by_class
?profile_plot
?democracy
vignette("LCA_plotter")
vignette(package =   "LCA_plotter")
vignette(package =   "LCAplotter")
?poLCA
library(LCAplotter)
knitr::kable(democracy)
?kable
knitr::kable(democracy[1:10,]) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::kable(democracy[1:10,]) %>%
knitr::kable_styling(bootstrap_options = c("striped", "hover"))
knitr::kable(democracy[1:10,])
knitr::kable(democracy[1:10,])
?poLCA
f
formula = cbind(tax, religion, free_election, state_aid, civil_rights, women) ~ 1
best_model = find_best_fit(democracy, formula)
formula = cbind(tax, religion, free_election, state_aid, civil_rights, women) ~ 1
best_model = find_best_fit(democracy, formula)
print(best_model)
best_model
p = plot = profile_plot(democracy, num_var = 6, model = NULL, form = formula, maximum_num_class = 5)
plot = profile_plot(democracy, num_var = 6, model = NULL, form = formula, maximum_num_class = 5)
plot = profile_plot(democracy, num_var = 6, model = NULL, form = formula, maximum_num_class = 3)
print(plot)
plot = profile_plot(democracy, num_var = 6, model = NULL, form = formula, maximum_num_class = 2)
print(plot)
print(plot)
print(best_model)
library(LCAplotter)
library(LCAplotter)
print(plot +
ggtitle("A test title"))
?poLCA
stacked_bar_by_class(best_model)
p = stacked_bar_by_class(best_model)
p = stacked_bar_by_class(best_model, color_palette = 'Set2')
RColorBrewer::display.brewer.all()
RColorBrewer::display.brewer.all()
browseVignettes("LCAplotter")
p = stacked_bar_by_item(best_model, color_palette = 'Set1')
p = stacked_bar_by_item(best_model)
build_vignettes = T (from install_github)
